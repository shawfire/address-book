# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: address-api
#app: your-app-name
#tenant: your-tenant-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: java8
  stage: dev
  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
iamRoleStatements:
  - Effect: "Allow"
    Action:
      - "dynamodb:*"
    Resource: "*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
  artifact: "target/${self:service}-${self:provider.stage}.jar"

functions:
  listAddressBooks:
    handler: com.serverless.ListAddressesHandler
    events:
      - http:
          path: /addresses
          method: get
  getAddressBook:
    handler: com.serverless.GetAddressHandler
    events:
      - http:
          path: /addresses/{i}
          method: get
  createAddress:
    handler: com.serverless.CreateAddressHandler
    events:
      - http:
          path: /addresses
          method: post
  deleteAddress:
    handler: com.serverless.DeleteAddressHandler
    events:
      - http:
          path: /addresses/{id}
          method: delete
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
resources:
  Resources:
    addressesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: addresses_table
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: bookName
            AttributeType: S
          - AttributeName: name
            AttributeType: S
          - AttributeName: mobile
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: bookName
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
